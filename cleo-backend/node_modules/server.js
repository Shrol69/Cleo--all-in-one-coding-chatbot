const express = require("express");
const cors = require("cors");
const { Server } = require("socket.io");
const http = require("http");
const axios = require("axios");
require("dotenv").config();

const app = express();
app.use(cors());
app.use(express.json());

const server = http.createServer(app);

const io = new Server(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"],
  },
});

// ✅ Test route to check if the server is running
app.get("/", (req, res) => {
  res.send("✅ Cleo API is working!");
});

// ✅ Test route to check AI chatbot response manually
app.post("/test-ai", async (req, res) => {
  const { message } = req.body;
  
  if (!message) {
    return res.status(400).json({ error: "Message is required" });
  }

  try {
    const response = await axios.post(
      "https://api.openai.com/v1/chat/completions",
      {
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: message }],
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );

    res.json({ aiResponse: response.data.choices[0].message.content });

  } catch (error) {
    console.error("🚨 AI API Error:", error.response ? error.response.data : error.message);
    res.status(500).json({ error: "AI API request failed" });
  }
});

io.on("connection", (socket) => {
  console.log(`✅ User connected: ${socket.id}`);

  socket.emit("me", socket.id);

  // Store chat history for AI context
  const chatHistory = {};

  socket.on("sendMessage", async ({ sender, message }) => {
    io.emit("receiveMessage", { sender, message });

    if (!chatHistory[sender]) chatHistory[sender] = [];
    chatHistory[sender].push({ role: "user", content: message });

    if (message.toLowerCase().includes("cleo") || message.toLowerCase().includes("ai")) {
      io.emit("receiveMessage", { sender: "Cleo (AI)", message: "Typing..." });

      try {
        const response = await axios.post(
          "https://api.openai.com/v1/chat/completions",
          {
            model: "gpt-3.5-turbo",
            messages: [
              { role: "system", content: "You are Cleo, a friendly and helpful AI chatbot." },
              ...chatHistory[sender],
            ],
          },
          {
            headers: {
              Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
              "Content-Type": "application/json",
            },
          }
        );

        const aiMessage = response.data.choices[0].message.content;
        io.emit("receiveMessage", { sender: "Cleo (AI)", message: aiMessage });

        chatHistory[sender].push({ role: "assistant", content: aiMessage });

      } catch (error) {
        console.error("🚨 AI API Error:", error.response ? error.response.data : error.message);
        io.emit("receiveMessage", { sender: "Cleo (AI)", message: "Sorry, I am facing issues right now." });
      }
    }
  });

  // Handle video call signaling
  socket.on("callUser", ({ userToCall, signalData, from }) => {
    io.to(userToCall).emit("callIncoming", { signal: signalData, from });
  });

  socket.on("answerCall", (data) => {
    io.to(data.to).emit("callAccepted", data.signal);
  });

  socket.on("disconnect", () => {
    console.log(`❌ User disconnected: ${socket.id}`);
    io.emit("userDisconnected", socket.id);
    delete chatHistory[socket.id];
  });
});

// Start the server
const PORT = process.env.PORT || 5000;
server.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));
